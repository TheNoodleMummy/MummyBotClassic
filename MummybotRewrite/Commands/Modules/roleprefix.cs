using Discord;
using Mummybot.Attributes;
using Mummybot.Database.Models;
using Qmmands;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Mummybot.Commands.Modules
{
    [Group("RolePrefix")]
    public class RolePrefix : MummyBase
    {

        [Command("add")]
        [RunMode(RunMode.Parallel)]
        [Description("prefixes all the accesable roles with a peice text (this can be unicode)")]
        [RequireBotPermission(GuildPermission.ManageRoles)]
        public async Task AssignRoleprefixes([Remainder]Emoji prefix)
        {
            foreach (var role in Context.Guild.Roles.Where(role => Context.Guild.EveryoneRole.Id != role.Id && role.Id != 188477343382110208))
            {
                var newname = $"{prefix} {role.Name}";
                Logs.LogInformation($"setting role name {role.Name}");
                await role.ModifyAsync(x => x.Name = newname);

            }
            await Context.Message.AddReactionAsync(new Emoji("✅"));
        }

        [Command("backup")]
        [RunMode(RunMode.Parallel)]
        [Description("backup all roles before making changes")]
        [RequireBotPermission(GuildPermission.ManageRoles)]
        public async Task BackupRoles()
        {
            GuildConfig.RoleBackups = new List<RoleBackup>();
            foreach (var role in Context.Guild.Roles)
            {
                if ((role.Id != Context.Guild.EveryoneRole.Id) && (role.Id != 188477343382110208))
                    GuildConfig.RoleBackups.Add(new RoleBackup(role.Id, role.Name));
            }
            await Context.Message.AddReactionAsync(new Emoji("✅"));
        }

        [Command("restore")]
        [RunMode(RunMode.Parallel)]
        [Description("restores role names to the last backup (autogenerated when prefix command is used/or manual with backup)")]
        [RequireBotPermission(GuildPermission.ManageRoles)]
        public async Task RemoveRoleprefixes()
        {

            foreach (var role in Context.Guild.Roles.Where(x => x.Id != Context.Guild.EveryoneRole.Id && x.Id != 188477343382110208))
            {

                var backuprole = GuildConfig.RoleBackups.FirstOrDefault(x => x.RoleID == role.Id);
                Logs.LogInformation($"Restoring {backuprole.Name}");
                await role.ModifyAsync(x => x.Name = backuprole.Name);

            }
            await Context.Message.AddReactionAsync(new Emoji("✅"));
        }

        [Command("change")]
        [RunMode(RunMode.Parallel)]
        [Description("change role names prefixes")]
        [RequireBotPermission(GuildPermission.ManageRoles)]
        public async Task ChangeRoleprefixes([Remainder]Emoji emoji)
        {

            foreach (var role in Context.Guild.Roles.Where(x => x.Id != Context.Guild.EveryoneRole.Id && x.Id != 188477343382110208))
            {
                var backuprole = GuildConfig.RoleBackups.FirstOrDefault(x => x.RoleID == role.Id);
                var newname = $"{emoji} {backuprole.Name}";
                Logs.LogInformation($"changing {backuprole.Name}");
                await role.ModifyAsync(x => x.Name = newname);
            }
            await Context.Message.AddReactionAsync(new Emoji("✅"));
        }
    }
}
